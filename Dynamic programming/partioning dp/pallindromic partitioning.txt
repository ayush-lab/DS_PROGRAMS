int dp[2001][2001];

bool pallindrome(string &s,int i, int j ){
    
    while(i<j){
        if(s[i]!=s[j]){
            return false;
        }
        i++;
        j--;
    }
    return true;
}

int solve( string &s, int i , int j){
    
    if(i>=j){
        return 0;
    }
    if(dp[i][j]!=-1) return dp[i][j];
    
    if(pallindrome(s,i,j)) return 0;
    
   
    
    int ans=INT_MAX;
    
    for(int k=i;k<j;k++){
    
        if(pallindrome(s,i,k))
        {   
            int temp  = 1 + solve(s,k+1,j);
            ans = min(temp,ans);
        }
    }
    
    return dp[i][j] = ans;
    
}

int minCut(string s) {
    int n = s.length();
    
    // vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
    memset(dp,-1,sizeof(dp));

    
    return solve(s,0,n-1);
}