// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	
	void dfs(vector<int>& visited, vector<int> adj[], int cur,stack<int> &st){
	    visited[cur]=1;
	    
	    for(int i=0;i<adj[cur].size();i++){
	        if(visited[adj[cur][i]]==0){
	            dfs(visited,adj,adj[cur][i],st);
	        }
	    }
	    
	    st.push(cur);
	    
	}
	
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> visited(V,0);
	    stack<int> st;
	    vector<int> ans;
	    
	    for(int i=0;i<V;i++){
	        if(visited[i]==0){
	            dfs(visited,adj,i,st);
	        }
	    }
	    
	    while(st.empty()==false){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	    return ans;
	}
};

    cin >> T;
    while (T--) {
        int N, E;
        cin >> E >> N;
        int u, v;

        vector<int> adj[N];

        for (int i = 0; i < E; i++) {
            cin >> u >> v;
            adj[u].push_back(v);
        }
        
        Solution obj;
        vector <int> res = obj.topoSort(N, adj);

        cout << check(N, res, adj) << endl;
    }
    
    return 0;
}  // } Driver Code Ends