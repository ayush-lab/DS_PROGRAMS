// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    vector<vector<int>> visited(N+1,vector<int>(N+1,0));
	    
	    queue<pair<pair<int,int>,int>> q;
	    
	    q.push({{KnightPos[0],KnightPos[1]},0});
	    
	    visited[KnightPos[0]][KnightPos[1]]=1;
	    
	    vector<pair<int,int>> directions = { {2,1},{-2,1},{2,-1},{-2,-1},{1,2},{-1,2},{1,-2},{-1,-2} };
	    
	    if(KnightPos[0]==TargetPos[0] and KnightPos[1]==TargetPos[1]) return 0;
	    
	    int ans=INT_MAX;
	    
	    while(!q.empty()){
	        
	        pair<pair<int,int>,int> ele = q.front();
	        q.pop();
	        
	        for(auto i:directions){
	            int new_row= ele.first.first + i.first;
	            int new_col= ele.first.second + i.second;
	            
	           // cout<<"new-row="<<new_row<<endl;
	           // cout<<"new_col="<<new_col<<endl;
	            
	            if(new_row<=0 or new_row>N or new_col<=0 or new_col>N 
	                or visited[new_row][new_col]==1) continue;
	                
	           
	            if(new_row==TargetPos[0] and new_col == TargetPos[1]){
                     ans = min(ans,ele.second+1);
	            }
	            else{
	               // cout<<"runing"<<endl;
	                visited[new_row][new_col]=1;
                    q.push({{new_row,new_col},ele.second+1});
	            }
	        
	             
	            
	        }
	    }
	   // if(ans==INT_MAX) return 
	    return ans;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends