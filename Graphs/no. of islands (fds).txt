// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    
    void dfs(int row,int col, vector<vector<char>>grid, vector<vector<int>> &visited, int i,int j){
        
        // if((grid[row][col]=='0') or (row<0) or (row>=i)
        // or (col<0) or (col>=j )) return ; 
        
        if(row<0 or col<0 or row>=i or col>=j) return;
        
        if(grid[row][col]=='0') return ;
        
        
        
        if(!visited[row][col]){
            
            visited[row][col]=1;
            
            dfs(row+1,col,grid,visited,i,j);
            dfs(row-1,col,grid,visited,i,j);
            dfs(row,col+1,grid,visited,i,j);
            dfs(row,col-1,grid,visited,i,j);
            dfs(row+1,col+1,grid,visited,i,j);
            dfs(row-1,col-1,grid,visited,i,j);
            dfs(row-1,col+1,grid,visited,i,j);
            dfs(row+1,col-1,grid,visited,i,j);    
        }
        
        return ;
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        
        int row = grid.size();
        int col = grid[0].size();
        
         if(row == 0)return 0;
        // bool visited[row+1][col+1];
        vector<vector<int>> visited(row,vector<int>(col,0));
        
        int ans=0;
        
        // for(int i=0;i<row;i++){
        //     for(int j=0;j<col;j++){
        //         visited[i][j]=0;
        //     }
        // }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(visited[i][j]==0 and grid[i][j]!='0'){
                    dfs(i,j,grid,visited,row,col);
                    ans++;
                }
            }
        }
        return ans;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}  // } Driver Code Ends