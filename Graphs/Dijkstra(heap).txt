// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        vector<int> distance(V,0);
        vector<int> visited(V,false);
        
        for(int i=0;i<V;i++) distance[i]=INT_MAX;
        
        distance[S]=0;
        
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> >p;
        
        p.push({distance[S],S});
        
        while(!p.empty()){
            
            int mini_ind = p.top().second;
            int dist = p.top().first;
            p.pop();
            
            visited[mini_ind]=true;
            
            for(auto j:adj[mini_ind]){
                int v = j[0];
                int w = j[1];
                int new_distance =w+distance[mini_ind];
    
                if(visited[v]==false and distance[v]>new_distance ){
                    distance[v]=new_distance;
                    p.push({new_distance,v});
                }
            }
        }
        return distance;
        
    }
};


// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}

  // } Driver Code Ends