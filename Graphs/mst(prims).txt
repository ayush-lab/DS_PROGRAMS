// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        int res=0;
    
        vector<int> key(V,INT_MAX);
        vector<bool> mst(V,false);
     
        
        priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > p;
        
        key[0]=0;
        p.push({0,0});
        
        // for(int i=0;i<V;i++){
        while(!p.empty()){
            int mini = p.top().second;
            int val = p.top().first;
            
            p.pop();
            if(mst[mini]==false)
                res+=val;
                
            mst[mini]=true;
            
            
            for(auto j: adj[mini]){
                int v = j[0];
                int weight=j[1];
          
                
                if(mst[v]==false and key[v]>weight){
                    key[v]=weight;
                    
                    p.push({weight,v});
                }
            }
            
    
    
        }
        
        return res;
        
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends