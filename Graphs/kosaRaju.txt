// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
	
	void  topo(int cur, vector<int> adj[],vector<bool> &visited,stack<int> &st){
	    visited[cur]=true;
	    
	    for(int i=0;i<adj[cur].size();i++){
	        if(visited[adj[cur][i]]==false){
	            topo(adj[cur][i],adj,visited,st);
	        }
	    }
	    st.push(cur);
	}
	
	void dfs(vector<bool> &visited, vector<int> adj[], int cur){
	    visited[cur]=true;
	     for(int i=0;i<adj[cur].size();i++){
	        if(visited[adj[cur][i]]==false){
	            dfs(visited,adj,adj[cur][i]);
	        }
	    }
	}
	
    int kosaraju(int V, vector<int> adj[])
    {
        //code here
        stack<int> st;
        vector<bool> visited(V,false);
        
        int ans=0;
        
        vector<int> transpose[V];
        
        for(int i=0;i<V;i++){
            if(visited[i]==false){
                topo(i,adj,visited,st);
                
            }
        }
        
        
        // transpose
        
        for(int i=0;i<V;i++){
            visited[i]=false;
            for(auto j:adj[i]){
                transpose[j].push_back(i);
            }
        }
        
        while(!st.empty()){
            if(visited[st.top()]==false){
                dfs(visited,transpose,st.top());
                ans++;
            }
            st.pop();
            
        }
        
        return ans;
    }
};

// { Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends