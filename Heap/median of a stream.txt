// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends
class Solution
{
    public:
        
    priority_queue<int> p1;
    priority_queue<int, vector<int>, greater<int> >p2;
    
    
    void insertHeap(int &x)
    {
        if(p1.size()==0 and p2.size()==0){
            p1.push(x);
        }   
        else if(p1.size() == p2.size()){
            if(x <= p2.top()){
                p1.push(x);
            }
            else{
                int ele_in_p2 = p2.top();
                p2.pop();
                p2.push(x);
                p1.push(ele_in_p2);
            }
        }
        
        else if(p1.size()>p2.size()){
            int ele1 = p1.top();
            
            if(x>=ele1) {
                p2.push(x);
            }
            
            else{
                p1.pop();
                p2.push(ele1);
                p1.push(x);
            }
            
        }
    }
    
    //Function to balance heaps.
    void balanceHeaps()
    {
        
    }
    
    //Function to return Median.
    double getMedian()
    {
        int s = p1.size()+p2.size();
        double ans=0;
        
        if(s%2==0){
            ans = (p1.top()+p2.top())/2;
        }
        
        else{
            ans = p1.top();
        }
        
        return ans;
        
    }
};


// { Driver Code Starts.

int main()
{
    int n, x;
    int t;
    cin>>t;
    while(t--)
    {
    	Solution ob;
    	cin >> n;
    	for(int i = 1;i<= n; ++i)
    	{
    		cin >> x;
    		ob.insertHeap(x);
    	    cout << floor(ob.getMedian()) << endl;
    	}
    }
	return 0;
}  // } Driver Code Ends